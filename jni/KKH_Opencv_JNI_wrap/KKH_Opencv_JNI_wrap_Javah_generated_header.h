/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class KKH_Opencv_JNI_wrap_imgcodecs_CvImage */

#ifndef _Included_KKH_Opencv_JNI_wrap_imgcodecs_CvImage
#define _Included_KKH_Opencv_JNI_wrap_imgcodecs_CvImage
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     KKH_Opencv_JNI_wrap_imgcodecs_CvImage
 * Method:    imread_jni
 * Signature: (Ljava/lang/String;ZI)LKKH/StdLib/Matk;
 */
JNIEXPORT jobject JNICALL Java_KKH_Opencv_1JNI_1wrap_imgcodecs_CvImage_imread_1jni
  (JNIEnv *, jclass, jstring, jboolean, jint);

/*
 * Class:     KKH_Opencv_JNI_wrap_imgcodecs_CvImage
 * Method:    imwrite_jni
 * Signature: (Ljava/lang/String;LKKH/StdLib/Matk;)V
 */
JNIEXPORT void JNICALL Java_KKH_Opencv_1JNI_1wrap_imgcodecs_CvImage_imwrite_1jni
  (JNIEnv *, jclass, jstring, jobject);

/*
 * Class:     KKH_Opencv_JNI_wrap_imgcodecs_CvImage
 * Method:    imshow_jni
 * Signature: (LKKH/StdLib/Matk;ILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_KKH_Opencv_1JNI_1wrap_imgcodecs_CvImage_imshow_1jni
  (JNIEnv *, jclass, jobject, jint, jstring);

/*
 * Class:     KKH_Opencv_JNI_wrap_imgcodecs_CvImage
 * Method:    imresize
 * Signature: (LKKH/StdLib/Matk;IIDDI)LKKH/StdLib/Matk;
 */
JNIEXPORT jobject JNICALL Java_KKH_Opencv_1JNI_1wrap_imgcodecs_CvImage_imresize
  (JNIEnv *, jclass, jobject, jint, jint, jdouble, jdouble, jint);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class KKH_Opencv_JNI_wrap_imgcodecs_CvImage_ImreadModes */

#ifndef _Included_KKH_Opencv_JNI_wrap_imgcodecs_CvImage_ImreadModes
#define _Included_KKH_Opencv_JNI_wrap_imgcodecs_CvImage_ImreadModes
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#endif
/* Header for class KKH_Opencv_JNI_wrap_imgcodecs_CvImage_Imresize_interpolation */

#ifndef _Included_KKH_Opencv_JNI_wrap_imgcodecs_CvImage_Imresize_interpolation
#define _Included_KKH_Opencv_JNI_wrap_imgcodecs_CvImage_Imresize_interpolation
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#endif
/* Header for class KKH_Opencv_JNI_wrap_videoio_CvVideoCapture */

#ifndef _Included_KKH_Opencv_JNI_wrap_videoio_CvVideoCapture
#define _Included_KKH_Opencv_JNI_wrap_videoio_CvVideoCapture
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     KKH_Opencv_JNI_wrap_videoio_CvVideoCapture
 * Method:    cvCreateFileCapture
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_KKH_Opencv_1JNI_1wrap_videoio_CvVideoCapture_cvCreateFileCapture
  (JNIEnv *, jclass, jstring);

/*
 * Class:     KKH_Opencv_JNI_wrap_videoio_CvVideoCapture
 * Method:    cvCreateCameraCapture
 * Signature: (I)J
 */
JNIEXPORT jlong JNICALL Java_KKH_Opencv_1JNI_1wrap_videoio_CvVideoCapture_cvCreateCameraCapture
  (JNIEnv *, jclass, jint);

/*
 * Class:     KKH_Opencv_JNI_wrap_videoio_CvVideoCapture
 * Method:    cvReleaseCapture
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_KKH_Opencv_1JNI_1wrap_videoio_CvVideoCapture_cvReleaseCapture
  (JNIEnv *, jclass, jlong);

/*
 * Class:     KKH_Opencv_JNI_wrap_videoio_CvVideoCapture
 * Method:    cvQueryFrame
 * Signature: (J)LKKH/StdLib/Matk;
 */
JNIEXPORT jobject JNICALL Java_KKH_Opencv_1JNI_1wrap_videoio_CvVideoCapture_cvQueryFrame
  (JNIEnv *, jclass, jlong);

/*
 * Class:     KKH_Opencv_JNI_wrap_videoio_CvVideoCapture
 * Method:    get_video_prop_jni
 * Signature: (JI)D
 */
JNIEXPORT jdouble JNICALL Java_KKH_Opencv_1JNI_1wrap_videoio_CvVideoCapture_get_1video_1prop_1jni
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     KKH_Opencv_JNI_wrap_videoio_CvVideoCapture
 * Method:    set_video_prop_jni
 * Signature: (JID)V
 */
JNIEXPORT void JNICALL Java_KKH_Opencv_1JNI_1wrap_videoio_CvVideoCapture_set_1video_1prop_1jni
  (JNIEnv *, jclass, jlong, jint, jdouble);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class KKH_Opencv_JNI_wrap_videoio_CvVideoCapture_Property */

#ifndef _Included_KKH_Opencv_JNI_wrap_videoio_CvVideoCapture_Property
#define _Included_KKH_Opencv_JNI_wrap_videoio_CvVideoCapture_Property
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#endif
